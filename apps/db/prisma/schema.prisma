// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------------------

// Enums
enum StatName {
  hp
  attack
  defense
  spattack
  spdefense
  speed
}

enum NatureNames {
  adamant
  bashful
  bold
  brave
  calm
  careful
  docile
  gentle
  hardy
  hasty
  impish
  jolly
  lax
  lonely
  mild
  modest
  naive
  naughty
  quiet
  quirky
  rash
  relaxed
  sassy
  serious
  timid
}

enum TypeNames {
  normal
  ice
  ghost
  dark
  grass
  electric
  steel
  ground
  fighting
  bug
  poison
  rock
  water
  flying
  fire
  dragon
  psychic
  empty
}

enum DamageClass {
  physical
  special
  status
}

enum MoveTarget {
  selectedPokemon
  user
  allOpponents
  userAndAllies
  specificMove
  allOtherPokemon
  entireField
  ally
  usersField
  randomOpponent
  allPokemon
  opponentsField
}

enum Gender {
  male
  female
  genderless
}

enum Tier {
  lc
  nfe
  nu
  ou
  pu
  publ
  uber
  uu
  uubl
}

// Enums

// Basic entities (types, abilities, moves, items)
model Type {
  id               String      @id @default(uuid())
  name             TypeNames   @unique
  damageClass      DamageClass
  noDamageTo       TypeNames[]
  halfDamageTo     TypeNames[]
  doubleDamageTo   TypeNames[]
  noDamageFrom     TypeNames[]
  halfDamageFrom   TypeNames[]
  doubleDamageFrom TypeNames[]
  pokemonTypeOne   Pokemon[]   @relation("TypeToPokemonTypeOne")
  pokemonTypeTwo   Pokemon[]   @relation("TypeToPokemonTypeTwo")
}

model Ability {
  id               String    @id @default(uuid())
  name             String    @unique
  shortDescription String
  longDescription  String
  Pokemon          Pokemon[]
  slots            Slot[]
}

model Nature {
  id        String      @id @default(uuid())
  name      NatureNames @unique
  increased StatName?
  decreased StatName?
  Slot      Slot[]
}

model Item {
  id          String  @id @default(uuid())
  name        String  @unique
  effect      String
  flingEffect String?
  flingPower  Int?
  sprite      String
  slot        Slot[]
}

// Pokemons
model Pokemon {
  id                    String    @id @default(uuid())
  name                  String    @unique
  nationalPokedexNumber Int       @unique
  sprite                String
  icon                  String
  height                Int
  weight                Int
  typeOne               Type      @relation("TypeToPokemonTypeOne", fields: [typeOneName], references: [name])
  typeOneName           TypeNames
  // TODO: make typeTwo field required
  typeTwo               Type?     @relation("TypeToPokemonTypeTwo", fields: [typeTwoName], references: [name])
  typeTwoName           TypeNames
  slot                  Slot[]
  abilities             Ability[]
  genders               Gender[]
  tier                  Tier      @default(lc)
  baseHp                Int
  baseAttack            Int
  baseDefense           Int
  baseSpattack          Int
  baseSpdefense         Int
  baseSpeed             Int
  learnset              Move[]
}

// Teams
model Team {
  id          String @id @default(uuid())
  name        String
  description String
  userName    String // INFO: just for now, User model not made yet
  slots       Slot[]
}

model Slot {
  id                    String      @id @default(uuid())
  name                  String?     @default("no-name")
  team                  Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                String
  pokemon               Pokemon     @relation(fields: [nationalPokedexNumber], references: [nationalPokedexNumber])
  nationalPokedexNumber Int
  order                 Int
  ability               Ability     @relation(fields: [abilityName], references: [name])
  abilityName           String
  nature                Nature      @relation(fields: [natureName], references: [name])
  natureName            NatureNames
  evHp                  Int         @default(0)
  evAttack              Int         @default(0)
  evDefense             Int         @default(0)
  evSpAttack            Int         @default(0)
  evSpDefense           Int         @default(0)
  evSpeed               Int         @default(0)
  ivHp                  Int         @default(31)
  ivAttack              Int         @default(31)
  ivDefense             Int         @default(31)
  ivSpAttack            Int         @default(31)
  ivSpDefense           Int         @default(31)
  ivSpeed               Int         @default(31)
  item                  Item?       @relation(fields: [itemName], references: [name])
  itemName              String?
  shiny                 Boolean     @default(false)
  gender                Gender
  level                 Int         @default(100)
  happiness             Int         @default(255)
  moveOne               Move        @relation("MoveToSlotMoveOne", fields: [moveOneName], references: [name])
  moveOneName           String
  moveTwo               Move?       @relation("MoveToSlotMoveTwo", fields: [moveTwoName], references: [name])
  moveTwoName           String?
  moveThree             Move?       @relation("MoveToSlotMoveThree", fields: [moveThreeName], references: [name])
  moveThreeName         String?
  moveFour              Move?       @relation("MoveToSlotMoveFour", fields: [moveFourName], references: [name])
  moveFourName          String?

  @@unique([teamId, order])
}

model Move {
  id               String      @id @default(uuid())
  name             String      @unique
  accuracy         Int
  damageClass      DamageClass
  description      String
  power            Int
  pp               Int
  target           MoveTarget
  type             TypeNames
  pokemon          Pokemon[]
  pokemonMoveOne   Slot[]      @relation("MoveToSlotMoveOne")
  pokemonMoveTwo   Slot[]      @relation("MoveToSlotMoveTwo")
  pokemonMoveThree Slot[]      @relation("MoveToSlotMoveThree")
  pokemonMoveFour  Slot[]      @relation("MoveToSlotMoveFour")
}
