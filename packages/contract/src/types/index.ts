import z from 'zod';
import { AbilitySchema, MoveSchema, PokemonSchema, Slot, SlotSchema, Team, TeamSchema } from '../prisma/zod';

export type EvFieldName = 'evAttack' | 'evDefense' | 'evHp' | 'evSpAttack' | 'evSpDefense' | 'evSpeed';
export type IvFieldName = 'ivAttack' | 'ivDefense' | 'ivHp' | 'ivSpAttack' | 'ivSpDefense' | 'ivSpeed';
export type IBaseStats = {
  baseHp: number;
  baseAttack: number;
  baseDefense: number;
  baseSpattack: number;
  baseSpdefense: number;
  baseSpeed: number;
};

// These types and schemas are combinations of the basic schemas generated by zod-prisma-types
// Pokemon
export const PokemonWithAbilitiesSchema = PokemonSchema.merge(z.object({ abilities: z.array(AbilitySchema) }));
export const PokemonWithAbilitiesAndLearnsetSchema = PokemonWithAbilitiesSchema.merge(z.object({ learnset: z.array(MoveSchema) }));

export type PokemonWithAbilities = z.infer<typeof PokemonWithAbilitiesSchema>;
export type PokemonWithAbilitiesAndLearnset = z.infer<typeof PokemonWithAbilitiesAndLearnsetSchema>;

// Slots and Teams
export const FilledSlotSchema = SlotSchema.merge(z.object({ pokemon: PokemonWithAbilitiesSchema }));
export const TeamWithFilledSlotsSchema = TeamSchema.merge(z.object({ slots: z.array(FilledSlotSchema) }));

export type FilledSlot = z.infer<typeof FilledSlotSchema>;
export type TeamWithFilledSlots = z.infer<typeof TeamWithFilledSlotsSchema>;
// These types and schemas are combinations of the basic schemas generated by zod-prisma-types
