import z from 'zod';
import { AbilitySchema, MoveSchema, PokemonSchema, Slot, Team } from '../prisma/zod';

export type EvFieldName = 'evAttack' | 'evDefense' | 'evHp' | 'evSpAttack' | 'evSpDefense' | 'evSpeed';
export type IvFieldName = 'ivAttack' | 'ivDefense' | 'ivHp' | 'ivSpAttack' | 'ivSpDefense' | 'ivSpeed';
export type IBaseStats = {
  baseHp: number;
  baseAttack: number;
  baseDefense: number;
  baseSpattack: number;
  baseSpdefense: number;
  baseSpeed: number;
};

// These types and schemas are combinations of the basic schemas generated by zod-prisma-types
export const PokemonWithAbilitiesSchema = PokemonSchema.merge(z.object({ abilities: z.array(AbilitySchema) }));
export const PokemonWithAbilitiesAndLearnsetSchema = PokemonWithAbilitiesSchema.merge(z.object({ learnset: z.array(MoveSchema) }));

export type PokemonWithAbilities = z.infer<typeof PokemonWithAbilitiesSchema>;
export type PokemonWithAbilitiesAndLearnset = z.infer<typeof PokemonWithAbilitiesAndLearnsetSchema>;
// These types and schemas are combinations of the basic schemas generated by zod-prisma-types

// Filled Teams and Slots
export type FilledSlot = Slot & { pokemon: PokemonWithAbilities }; // The type of the web slot WITH pokemon
export type FilledTeam = Team & { slots: FilledSlot[] }; // The type of the web team WITH filled slots
